# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AuthPayload {
  refreshToken: String
  token: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type MessagePayload {
  message: String!
}

type Mutation {
  createPost(category: PostCategory!, published: Boolean, title: String!): Post!
  createUser(email: String!, isAdmin: Boolean, name: String, password: String!): User!
  deletePost(id: String!): Post!
  deleteUser(id: String!): User!
  deleteUsers: [User!]!
  login(email: String!, password: String!): AuthPayload!
  refreshLogin(refreshToken: String!): AuthPayload!
  register(email: String!, name: String, password: String!): User!
  resetPassword(email: String!): MessagePayload!
  updatePassword(password: String!): MessagePayload!
  updatePost(id: String!, input: PostUpdateInput!): Post!
  updateUser(id: String!, input: UserUpdateInput!): User!
}

enum OrderByArg {
  asc
  desc
}

type Post {
  author: User
  category: PostCategory
  createdAt: DateTime!
  id: ID!
  published: Boolean
  title: String!
  updatedAt: DateTime!
}

enum PostCategory {
  CAREER
  EDUCATION
  FINANCE
  FITNESS
  FOOD
  GAMING
  HEALTH
  NATURE
  OTHER
  PETS
  SPORTS
  TECHNOLOGY
}

input PostOrderByInput {
  category: OrderByArg
  createdAt: OrderByArg
  id: OrderByArg
  published: OrderByArg
  title: OrderByArg
  updatedAt: OrderByArg
}

input PostUpdateInput {
  category: PostCategory
  published: Boolean
  title: String
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  me: User!
  post(id: String!): Post!
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, filter: String, first: Float, last: Float, orderBy: PostOrderByInput, skip: Float): [Post!]!
  user(id: String!): User!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, filter: String, first: Float, last: Float, orderBy: UserOrderByInput, skip: Float): [User!]!
}

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  isAdmin: Boolean!
  name: String
  posts: [Post!]
  updatedAt: DateTime!
}

input UserOrderByInput {
  createdAt: OrderByArg
  email: OrderByArg
  id: OrderByArg
  isAdmin: OrderByArg
  name: OrderByArg
  updatedAt: OrderByArg
}

input UserUpdateInput {
  email: String
  isAdmin: Boolean
  name: String
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
