# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type BatchPayload {
  count: Int!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

enum Category {
  CAREER
  EDUCATION
  FINANCE
  FITNESS
  FOOD
  GAMING
  HEALTH
  NATURE
  OTHER
  PETS
  SPORTS
  TECHNOLOGY
}

input CategoryFilter {
  equals: Category
  not: Category
  in: [Category!]
  notIn: [Category!]
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  not: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
}

type Mutation {
  createOnePost(data: PostCreateInput!): Post!
  deleteOnePost(where: PostWhereUniqueInput!): Post
  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  deleteManyPost(where: PostWhereInput): BatchPayload!
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  createOneUser(data: UserCreateInput!): User!
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteManyUser(where: UserWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
}

input NullableStringFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Post {
  id: String!
  title: String!
  category: Category!
  published: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User!
}

input PostCreateInput {
  id: String
  title: String!
  category: Category
  published: Boolean!
  createdAt: DateTime
  updatedAt: DateTime
  author: UserCreateOneWithoutPostsInput!
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  id: String
  title: String!
  category: Category
  published: Boolean!
  createdAt: DateTime
  updatedAt: DateTime
}

input PostFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input PostOrderByInput {
  id: OrderByArg
  title: OrderByArg
  author: OrderByArg
  category: OrderByArg
  published: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
}

input PostScalarWhereInput {
  id: UUIDFilter
  title: StringFilter
  category: CategoryFilter
  published: BooleanFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

input PostUpdateInput {
  id: String
  title: String
  category: Category
  published: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  author: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateManyDataInput {
  id: String
  title: String
  category: Category
  published: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input PostUpdateManyMutationInput {
  id: String
  title: String
  category: Category
  published: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  deleteMany: [PostScalarWhereInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateWithoutAuthorDataInput {
  id: String
  title: String
  category: Category
  published: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  id: UUIDFilter
  title: StringFilter
  category: CategoryFilter
  published: BooleanFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  author: UserWhereInput
}

input PostWhereUniqueInput {
  id: String
}

type Query {
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int): [Post!]!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

enum Role {
  USER
  ADMIN
}

input RoleFilter {
  equals: Role
  not: Role
  in: [Role!]
  notIn: [Role!]
}

input StringFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}

type User {
  id: String!
  name: String
  email: String!
  password: String!
  role: Role!
  refreshToken: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int): [Post!]
}

input UserCreateInput {
  id: String
  name: String
  email: String!
  password: String!
  role: Role!
  refreshToken: String!
  createdAt: DateTime
  updatedAt: DateTime
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostsInput {
  id: String
  name: String
  email: String!
  password: String!
  role: Role!
  refreshToken: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input UserOrderByInput {
  id: OrderByArg
  name: OrderByArg
  email: OrderByArg
  password: OrderByArg
  role: OrderByArg
  refreshToken: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
}

input UserUpdateInput {
  id: String
  name: String
  email: String
  password: String
  role: Role
  refreshToken: String
  createdAt: DateTime
  updatedAt: DateTime
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  id: String
  name: String
  email: String
  password: String
  role: Role
  refreshToken: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutPostsDataInput {
  id: String
  name: String
  email: String
  password: String
  role: Role
  refreshToken: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  id: UUIDFilter
  name: NullableStringFilter
  email: StringFilter
  password: StringFilter
  role: RoleFilter
  posts: PostFilter
  refreshToken: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: String
  email: String
}

input UUIDFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}
